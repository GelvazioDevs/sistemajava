package api;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONObject;

/**
 * @author Gelvazio Camargo
 */
public class ChamadasApi extends javax.swing.JFrame {
    
    public ChamadasApi() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        btnViaCep = new javax.swing.JButton();
        btnNasa = new javax.swing.JButton();
        edtCep = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 10, -1));
        getContentPane().add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 610, 10));
        getContentPane().add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 610, 10));

        btnViaCep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Knob Search.png"))); // NOI18N
        btnViaCep.setText("CHAMADA API VIA CEP");
        btnViaCep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViaCepActionPerformed(evt);
            }
        });
        getContentPane().add(btnViaCep, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 200, 40));

        btnNasa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Knob Search.png"))); // NOI18N
        btnNasa.setText("CHAMADA API NASA");
        btnNasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNasaActionPerformed(evt);
            }
        });
        getContentPane().add(btnNasa, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 190, 40));

        edtCep.setText("89160328");
        getContentPane().add(edtCep, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 110, -1));

        jLabel1.setText("CEP:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViaCepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViaCepActionPerformed
        try {
            executaChamadaApiViaCep();
        } catch (IOException ex) {
            Logger.getLogger(ChamadasApi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnViaCepActionPerformed

    private void btnNasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNasaActionPerformed
        try {
            executaChamadaApiNasa();
        } catch (IOException ex) {
            Logger.getLogger(ChamadasApi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNasaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChamadasApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChamadasApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChamadasApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChamadasApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChamadasApi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNasa;
    private javax.swing.JButton btnViaCep;
    private javax.swing.JTextField edtCep;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    // End of variables declaration//GEN-END:variables

    private void executaChamadaApiViaCep() throws MalformedURLException, IOException {
        // String cep = "01001000"; // Exemplo de CEP (São Paulo - SP)
        String cep = edtCep.getText();
        String url = "https://viacep.com.br/ws/" + cep + "/json/";

        try {
            // Criando a conexão com a URL
            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setRequestMethod("GET"); // Definindo método GET
            connection.setRequestProperty("Accept", "application/json"); // Define o tipo de resposta esperada

            // Verificando se a resposta foi bem-sucedida (código 200)
            if (connection.getResponseCode() != 200) {
                System.out.println("Erro na conexão: " + connection.getResponseCode());
                return;
            }

            // Lendo a resposta da API
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder resposta = new StringBuilder();
            String linha;
            while ((linha = reader.readLine()) != null) {
                resposta.append(linha);
            }
            reader.close();
            connection.disconnect();

            // Exibindo a resposta JSON
            System.out.println("Resposta da API:");
            System.out.println(resposta.toString());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void executaChamadaApiNasa() throws MalformedURLException, IOException {
        // Create a neat value object to hold the URL
        URL url = new URL("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY");

        // Open a connection(?) on the URL(??) and cast the response(???)
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Now it's "open", we can set the request method, headers etc.
        connection.setRequestProperty("accept", "application/json");

        // This line makes the request
        InputStream responseStream = connection.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(responseStream));

        String linha;
        while ((linha = reader.readLine()) != null) {
            System.out.println(linha);
            JSONObject jsonObject = new JSONObject(linha);
            String copyright = jsonObject.getString("copyright");
            String date = jsonObject.getString("date");
            String explanation = jsonObject.getString("explanation");
            String title = jsonObject.getString("title");
            String urlRetorno = jsonObject.getString("url");
            
            System.out.println("copyright:" + copyright);
            System.out.println("date:" + date);
            System.out.println("explanation:" + explanation);
            System.out.println("title:" + title);
            System.out.println("url:" + urlRetorno);
        }

        reader.close();
    }    

}


